# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: dev-deploy

on:
  push:
    branches: ['dev']

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.16.0]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - name: Checkout source code.
        uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Check Npm -v
        run: npm -v

      - name: create env file
        working-directory: ./
        run: |
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DEV_DB_PASSWORD }}" >> .env
          echo "DB_DATABASE=${{ secrets.DEV_DB_DATABASE }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "JWT_EXPIRATION=${{ secrets.JWT_EXPIRATION }}" >> .env
          echo "KAKAO_ID=${{ secrets.KAKAO_ID }}" >> .env
          echo "KAKAO_SECRET=${{ secrets.KAKAO_SECRET }}" >> .env
          echo "KAKAO_REDIRECT=${{ secrets.DEV_KAKAO_REDIRECT }}" >> .env
          echo "NAVER_ID=${{ secrets.NAVER_ID }}" >> .env
          echo "NAVER_SECRET=${{ secrets.NAVER_SECRET }}" >> .env
          echo "NAVER_REDIRECT=${{ secrets.DEV_NAVER_REDIRECT }}" >> .env
          echo "PORT"=${{ secrets.DEV_PORT }} >> .env

      - name: copy appspec.yml
        run: cp appspec/appspec-dev.yml appspec.yml

      - name: copy scripts
        run: mkdir -p scripts && cp dev-scripts/after-deploy.sh scripts/after-deploy.sh

      - name: build server files
        working-directory: ./
        run: |
          yarn install
          yarn run build

      - name: zip file
        run: zip -r build.zip ./dist ./scripts ./appspec.yml ./.env ./package.json ./node_modules ./yarn.lock

      - name: AWS configure credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: upload to S3
        run: aws s3 cp --region ap-northeast-2 ./build.zip s3://oodd-api-bucket/dev/

      - name: deploy with AWS codeDeploy
        run: aws deploy create-deployment
          --application-name nestjs-app-dev
          --deployment-config-name CodeDeployDefault.OneAtATime
          --deployment-group-name nestjs-app-dev-group
          --s3-location bucket=oodd-api-bucket,bundleType=zip,key=dev/build.zip
